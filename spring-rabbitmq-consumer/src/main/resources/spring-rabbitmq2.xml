<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/rabbit
       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!--扫描ioc注解所在的包-->
    <context:component-scan base-package="com.itguigu.listener"></context:component-scan>
    
    <!--加载配置文件-->
    <context:property-placeholder location="classpath:rabbitmq.properties"/>

    <!-- 定义rabbitmq connectionFactory 连接工厂 -->
    <rabbit:connection-factory id="connectionFactory"
                               host="${rabbitmq.host}"
                               port="${rabbitmq.port}"
                               username="${rabbitmq.username}"
                               password="${rabbitmq.password}"
                               virtual-host="${rabbitmq.virtual-host}"/>

    <!--监听器容器，用于管理所有的监听器（消费者）-->
    <!--默认处理方式，根据异常自动处理,出现异常，消息会返回给队列并发送给其他消费者，没有其他消费者就会无限循环-->
<!--    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="auto" auto-declare="true">-->

    <!--手动确认：则需要在业务处理成功后，调用channel.basicAck()，手动签收，如果出现异常，则调用channel.basicNack()方法，让其自动重新发送消息。-->
<!--    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="manual" auto-declare="true">-->

<!--    自动确认：业务处理出现异常，那么该消息就会丢失。-->

    <!--
        acknowledge="manual" 手动确认
        prefetch=5 限流，消费者每次只接收5条消息，确认之后在取下一条消息
    -->
    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="manual" auto-declare="true" prefetch="5">
        <!--
            监听器，对消费者来说不管是什么模式，只需要监听所需要监听的队列即可
                ref:监听器对象在sprng容器中的唯一标识(自己创建的监听器对象，加入到IOC容器当中)
                queue-name：队列名
        -->
        <!--<rabbit:listener ref="simpleListener" queue-names="spring_simple_queue"></rabbit:listener>-->

        <!--确认消息的监听器-->
        <!--<rabbit:listener ref="ackListener" queue-names="spring_simple_queue"></rabbit:listener>-->

        <!--拒绝确认的监听器-->
        <!--<rabbit:listener ref="nackListener2" queue-names="spring_normal_queue1"></rabbit:listener>-->

        <!--死信队列的消费者-->
        <rabbit:listener ref="deadListener" queue-names="spring_dead_queue1"></rabbit:listener>

    </rabbit:listener-container>
</beans>
